package main

import (
	"bufio"
	"log"
	"os"
	"time"

	"github.com/stream3715/command-handler-rcs620/lib"
	"go.bug.st/serial"
)

var sc = bufio.NewScanner(os.Stdin)

func main() {
	portName, err := lib.GetPortName()
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}
	mode := &serial.Mode{
		BaudRate: 115200,
		DataBits: 8,
		Parity:   serial.NoParity,
		StopBits: serial.OneStopBit,
	}
	port, err := serial.Open(portName, mode)
	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}

	go lib.ReadCommand(port)

	time.Sleep(time.Second)

	lib.SendCommand(port, []byte{0xd4, 0x08, 0x63, 0x0d, 0x08})
	time.Sleep(time.Millisecond * 100)
	lib.SendCommand(port, []byte{0xd4, 0x12, 0x18})
	time.Sleep(time.Millisecond * 100)
	lib.SendCommand(port, []byte{0xd4, 0x8c, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x01, 0x14, 0xb3, 0xc5, 0x53, 0x1b, 0x26, 0x28, 0x01, 0x20, 0x22, 0x04, 0x27, 0x67, 0x4e, 0xff, 0xff, 0xff, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x00})

	for {
		s := nextLine()
		switch s {
		case "0":
			lib.SendCommand(port, []byte{0xd4, 0x08, 0x63, 0x0d, 0x08})
			time.Sleep(time.Millisecond * 100)
			lib.SendCommand(port, []byte{0xd4, 0x12, 0x18})
			time.Sleep(time.Millisecond * 100)
			lib.SendCommand(port, []byte{0xd4, 0x8c, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x01, 0x14, 0xb3, 0xc5, 0x53, 0x1b, 0x26, 0x28, 0x01, 0x20, 0x22, 0x04, 0x27, 0x67, 0x4e, 0xff, 0xff, 0xff, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x00})

		case "1":
			lib.SendCommand(port, []byte{0xd4, 0x88})

		case "r":
			lib.SendCommand(port, []byte{0xD4, 0x18, 0x01})
			time.Sleep(time.Millisecond * 10)
			lib.SendAck(port)
		case "a":
			lib.SendAck(port)
		case "q":
			os.Exit(0)
		}
	}
}

func nextLine() string {
	sc.Scan()
	return sc.Text()
}
